{"version":3,"sources":["components/Movie.jsx","utils/utils.js","button.jsx","MovieTabs.jsx","movieWillWatch.jsx","components/MainPage.jsx","App.js","serviceWorker.js","index.js"],"names":["Movie","props","showHideOverview","setState","showOverview","state","addLike","like","deleteMovieOnClick","deleteMovie","movie","addMovieWillWatch","willSee","removeMovieWillWatch","deleteMovieWillWatch","this","title","vote_average","overview","backdrop_path","poster_path","className","src","alt","type","onClick","React","Component","API_URL","API_KEY_3","Button","filter","filterOnClick","setClassLink","sortMovies","filterAPI","nameFilter","MovieTabs","nextProps","nextState","nextContext","sort_by","filtersName","map","f","i","event","btn","MovieWillWatch","MainPage","movies","movieWillWatch","pages","getMovies","fetch","then","response","json","data","results","updateMovie","m","id","willWatch","nextPage","previousPage","alert","prevProps","prevState","console","log","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.65dafbdf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport './Movie.css'\r\n\r\nclass Movie extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showOverview: false,\r\n            like: false,\r\n            movie: this.props.movie,\r\n            willSee: false\r\n        }\r\n    }\r\n\r\n    showHideOverview = () => {\r\n        this.setState({showOverview: !this.state.showOverview})\r\n    }\r\n\r\n    addLike = () => {\r\n        this.setState({like: !this.state.like})\r\n    }\r\n\r\n    deleteMovieOnClick = () => {\r\n        this.props.deleteMovie(this.state.movie)\r\n\r\n    }\r\n\r\n    addMovieWillWatch = () => {\r\n        this.props.addMovieWillWatch(this.state.movie)\r\n        this.setState({willSee: true})\r\n    }\r\n\r\n    removeMovieWillWatch = () => {\r\n        this.props.deleteMovieWillWatch(this.state.movie)\r\n        this.setState({willSee: false})\r\n    }\r\n\r\n    render() {\r\n        let {movie: {title, vote_average, overview, backdrop_path, poster_path}} = this.props;\r\n\r\n        return <div className='card'>\r\n            <img className='card-img-top' src={`http://image.tmdb.org/t/p/w500${backdrop_path || poster_path}`} alt=''/>\r\n            <div className='card-body'>\r\n                <div className='card-title'>\r\n                    {title}\r\n                </div>\r\n                <div className=\"d-flex justify-content-between align-items-center\">\r\n                    <p className='mb-0'>Rating: {vote_average}</p>\r\n                    {this.state.showOverview\r\n                        ? <p>{overview}</p>\r\n                        : null}\r\n                    {this.state.willSee ?\r\n                        <button type='button' className='btn btn-success' onClick={this.removeMovieWillWatch}>Remove\r\n                            from list</button> :\r\n                        <button type='button' className='btn btn-secondary' onClick={this.addMovieWillWatch}>\r\n                            Will watch\r\n                        </button>}\r\n                </div>\r\n                <button type='button' onClick={this.addLike}\r\n                        className={this.state.like ? \"btn-like\" : null}\r\n                >Like\r\n                </button>\r\n                <button type='button'\r\n                        onClick={this.showHideOverview}> {this.state.showOverview ? 'Hide' : 'Show'}</button>\r\n                <button type='button' onClick={this.deleteMovieOnClick}>Delete movie</button>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nMovie.propTypes = {movie: PropTypes.any}\r\n\r\nexport default Movie","export const API_URL = \"https://api.themoviedb.org/3\";\r\n\r\nexport const API_KEY_3 = \"3f4ca4f3a9750da53450646ced312397\";\r\n\r\nexport const API_KEY_4 =\r\n    \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzZjRjYTRmM2E5NzUwZGE1MzQ1MDY0NmNlZDMxMjM5NyIsInN1YiI6IjVhYzlmNWRkOTI1MTQxNjJhZTA1Njk0NiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Fc4f9DVB6pFWh6hIjYe0NCC4pImdmNzDIfi_3Nb3tC4\";\r\n","import React from 'react';\r\n\r\nconst Button = ({filter, filterOnClick, setClassLink, sortMovies}) => {\r\n    return <div className='nav-item'>\r\n        <button onClick={filterOnClick(filter.filterAPI)}\r\n                className={setClassLink(filter.filterAPI)}>{filter.nameFilter}\r\n        </button>\r\n    </div>\r\n}\r\n\r\nexport default Button","import React from 'react';\r\nimport Button from \"./button\";\r\n\r\nclass MovieTabs extends React.Component {\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        return nextProps.sort_by !== this.props.sort_by ? true : false\r\n    }\r\n\r\n// , popularity.asc, popularity.desc, release_date.asc, release_date.desc, revenue.asc, revenue.desc, primary_release_date.asc, primary_release_date.desc, original_title.asc, original_title.desc, vote_average.asc, vote_average.desc, vote_count.asc, vote_count.desc\r\n\r\n    render() {\r\n        const filtersAPI = ['popularity.desc', 'revenue.desc', 'vote_average.desc', \"release_date.desc\"]\r\n        const filtersName = ['Popular', 'Revenue', 'Vote average', 'Release date']\r\n        const filter = filtersAPI.map((f, i) => ({filterAPI: f, nameFilter: filtersName[i]}))\r\n\r\n\r\n        const filterOnClick = event => {\r\n            return (filter) => {\r\n                this.props.sortMovies(event)\r\n            }\r\n        }\r\n\r\n        const setClassLink = (filter) => {\r\n            return `nav-link ${this.props.sort_by === filter ? 'active' : ''}`\r\n        }\r\n\r\n        return <div className='tabs nav nav-pills'>\r\n            <li className='nav-item'>\r\n                <div className='list-group list-group-horizontal-md'>\r\n                    {filter.map(btn => <Button filter={btn} filterOnClick={filterOnClick}\r\n                                               setClassLink={setClassLink}/>)}\r\n                </div>\r\n            </li>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default MovieTabs\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\n\r\nconst MovieWillWatch = (props) => {\r\n    return <div className='row-cols-md-1'>\r\n        <ul className='list-group list-group-flush'>\r\n            <li className=\"card-header\">Title: {props.movie.title} </li>\r\n            <img className='card-img-top'\r\n                 src={`http://image.tmdb.org/t/p/w500${props.movie.backdrop_path || props.movie.poster_path}`} alt=''/>\r\n            <li className='list-group-item'>Rating: {props.movie.vote_average}</li>\r\n        </ul>\r\n    </div>\r\n}\r\n\r\nexport default MovieWillWatch","import React from 'react';\r\nimport Movie from \"./Movie\";\r\nimport {API_KEY_3, API_URL} from \"../utils/utils\";\r\nimport MovieTabs from \"../MovieTabs\";\r\nimport MovieWillWatch from \"../movieWillWatch\";\r\n\r\nclass MainPage extends React.Component {\r\n    state = {\r\n        movies: [],\r\n        movieWillWatch: [],\r\n        sort_by: 'popularity.desc',\r\n        pages: 1\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        this.getMovies()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.sort_by !== this.state.sort_by || prevState.pages !== this.state.pages) {\r\n            return this.getMovies()\r\n        }\r\n    }\r\n\r\n\r\n    getMovies = () => {\r\n        fetch(`${API_URL}/discover/movie?page=${this.state.pages}&api_key=${API_KEY_3}&sort_by=${this.state.sort_by}`).then((response) => {\r\n            return response.json()\r\n        }).then((data) => {\r\n            this.setState({movies: data.results})\r\n        })\r\n    }\r\n\r\n    deleteMovie = (movie) => {\r\n        let updateMovie = this.state.movies.filter(m => m.id !== movie.id)\r\n        this.setState({movies: updateMovie})\r\n    }\r\n\r\n    addMovieWillWatch = (movie) => {\r\n        let willWatch = [...this.state.movieWillWatch, movie];\r\n        this.setState({movieWillWatch: willWatch})\r\n    }\r\n\r\n    deleteMovieWillWatch = (movie) => {\r\n        let updateMovie = this.state.movieWillWatch.filter(m => m.id !== movie.id)\r\n        this.setState({movieWillWatch: updateMovie})\r\n    }\r\n\r\n    sortMovies = filter => {\r\n        this.setState({sort_by: filter})\r\n    }\r\n\r\n    nextPage = () => {\r\n        this.setState({pages: this.state.pages + 1})\r\n    }\r\n\r\n    previousPage = () => {\r\n        if (this.state.pages > 1) {\r\n            this.setState({pages: this.state.pages - 1})\r\n        } else (alert('This is first page'))\r\n\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.sort_by)\r\n        return (<div className='container-fluid'>\r\n            <h1 className='p-3 mb-2 bg-warning text-dark'>List of movies</h1>\r\n            <div className=\"row m-3\">\r\n                <div className=\"col-9\">\r\n                    <div className=\"row mb-4\">\r\n                        <div className=\"col-12\">\r\n                            <h2>Filters</h2>\r\n                            <MovieTabs sort_by={this.state.sort_by} sortMovies={this.sortMovies}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className='row m-5 ml-auto'>\r\n                        <div className=\"list-group\">\r\n                            <h2>Pages</h2>\r\n                            <div className='list-group list-group-horizontal '>\r\n\r\n                                <button onClick={() => {\r\n                                    this.previousPage()\r\n                                }}>\r\n                                    Previous page\r\n                                </button>\r\n                                <div>{this.state.pages - 1}</div>\r\n                                <h3>{this.state.pages}</h3>\r\n                                <div>{this.state.pages + 1}</div>\r\n                                <button onClick={() => {\r\n                                    this.nextPage()\r\n                                }}>\r\n                                    Next page\r\n                                </button>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        {this.state.movies.map(movie => <div className='col-6 mb-4'>\r\n                            <Movie movie={movie}\r\n                                   key={movie.id}\r\n                                   deleteMovie={this.deleteMovie}\r\n                                   addMovieWillWatch={this.addMovieWillWatch}\r\n                                   deleteMovieWillWatch={this.deleteMovieWillWatch}\r\n                            />\r\n                        </div>)}\r\n                    </div>\r\n                </div>\r\n                <div className='col-3'>\r\n                    <div className='row'>\r\n                        {this.state.movieWillWatch.map(movie => {\r\n                                return <div className='col-6 mb-4'><MovieWillWatch movie={movie}/></div>\r\n                            }\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n\r\n    }\r\n}\r\n\r\nexport default MainPage","import React from 'react';\nimport MainPage from \"./components/MainPage\";\n\n\nfunction App() {\n    return (\n        <div>\n            <MainPage/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}